<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lhy-maker.github.io</id>
    <title>Gridea</title>
    <updated>2021-06-01T09:44:05.152Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lhy-maker.github.io"/>
    <link rel="self" href="https://lhy-maker.github.io/atom.xml"/>
    <subtitle>欢迎来到我的世界，请遵循协议！</subtitle>
    <logo>https://lhy-maker.github.io/images/avatar.png</logo>
    <icon>https://lhy-maker.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Acwing 通关打怪之路]]></title>
        <id>https://lhy-maker.github.io/post/acwing-tong-guan-da-guai-zhi-lu/</id>
        <link href="https://lhy-maker.github.io/post/acwing-tong-guan-da-guai-zhi-lu/">
        </link>
        <updated>2021-06-01T09:22:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1背包问题分为01背包问题完全背包问题和多重背包问题">1，背包问题：分为01背包问题，完全背包问题和多重背包问题。</h1>
<p>基础题型讲解： 01 背包问题<br>
有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。<br>
第 i 件物品的体积是 vi，价值是 wi。<br>
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>
输出最大价值。<br>
输入格式<br>
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。<br>
接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。<br>
输出格式<br>
输出一个整数，表示最大价值。<br>
数据范围<br>
0&lt;N,V≤1000<br>
0&lt;vi,wi≤1000<br>
输入样例<br>
4 5<br>
1 2<br>
2 4<br>
3 4<br>
4 5<br>
输出样例：<br>
8</p>
<p>题解：用F[i][j]表示前i个物体，在背包容积为 j 的情况下，所能达到的最大价值。<br>
此题属于动态规划的范畴，可以采用集合概念来分析；<br>
DP分为状态表示(F[i][j])和状态计算(本质是集合的划分)，状态的表示F[i][j]分为集合和属性两大部分，集合部分主要是对所有选法和选法条件即数目限制和体积限制，而属性部分包括max,min,num等多种属性。<br>
对于本题而言：状态表示部分；F[i][j]表示前i个物体，在背包容积为 j 的情况下，所能达到的最大价值。<br>
状态计算部分：F[i][j]=F[i-1][j];//表示不选第i个物体且满足题目要求的最大值；<br>
F[i][j]=max(F[i][j],F[i-1][j-v]+w); //表示选第i个物体且满足题目要求的最大值；</p>
<h1 id="示例代码未优化代码">示例代码（未优化代码🚩）：</h1>
<p>#include<iostream><br>
#include<algorithm><br>
#include&lt;stdio.h&gt;<br>
const int N=1010;<br>
int V[N],W[N],F[N][N];<br>
using namespace std;<br>
int main(){<br>
int m,n;<br>
scanf(&quot;%d %d&quot;,&amp;m,&amp;n);<br>
for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d&quot;,&amp;V[i],&amp;W[i]);<br>
for(int i=1;i&lt;=m;i++){<br>
for(int j=0;j&lt;=n;j++){<br>
F[i][j]=F[i-1][j];<br>
if(j&gt;=V[i]){<br>
F[i][j]=max(F[i][j],F[i-1][j-V[i]]+W[i]);<br>
}<br>
}<br>
}<br>
printf(&quot;%d\n&quot;,F[m][n]);<br>
return 0;<br>
}</p>
<p>优化代码思路：F[i][j]表示前i个物体，在背包容积为 j 的情况下，所能达到的最大价值。<br>
而二维数组F[i][j]可以用一维数组F[j]表示,将i作为隐形的坐标：</p>
<h1 id="示例代码优化后代码️">示例代码：(优化后代码🏳️‍🌈)</h1>
<p>#include<iostream><br>
#include<algorithm><br>
#include&lt;stdio.h&gt;<br>
const int N=1010;<br>
int V[N],W[N],F[N];<br>
using namespace std;<br>
int main(){<br>
int m,n;<br>
scanf(&quot;%d %d&quot;,&amp;m,&amp;n);<br>
for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d&quot;,&amp;V[i],&amp;W[i]);<br>
for(int i=1;i&lt;=m;i++){<br>
for(int j=n;j&gt;=V[i];j--){<br>
F[j]=max(F[j],F[j-V[i]]+W[i]);<br>
}<br>
}<br>
printf(&quot;%d\n&quot;,F[n]);<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Acwing 周赛 NO1]]></title>
        <id>https://lhy-maker.github.io/post/acwing-zhou-sai-no1/</id>
        <link href="https://lhy-maker.github.io/post/acwing-zhou-sai-no1/">
        </link>
        <updated>2021-05-30T03:08:18.000Z</updated>
        <summary type="html"><![CDATA[<p>Acwing 3578 最大中位数<br>
#include <iostream><br>
#include <cstring><br>
#include <algorithm></p>
<p>using namespace std;</p>
<p>typedef long long LL；//由于数据范围所以采用LL;</p>
<p>const int N = 200010;</p>
<p>int n, m;<br>
int w[N];</p>
<p>bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
return res &lt;= m;<br>
}</p>
<p>int main()<br>
{<br>
scanf(&quot;%d%d&quot;, &amp;n, &amp;m);<br>
for (int i = 0; i &lt; n; i ++ ) scanf(&quot;%d&quot;, &amp;w[i]);<br>
sort(w, w + n);//将所有数据排序<br>
int l = 0, r = 2e9;<br>
//二分排序<br>
while (l &lt; r)<br>
{<br>
int mid = (LL)l + r + 1 &gt;&gt; 1;<br>
if (check(mid)) l = mid;<br>
else r = mid - 1;<br>
}<br>
printf(&quot;%d\n&quot;, r);<br>
return 0;<br>
}</p>
<p>题解1：<br>
bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
printf(&quot;%lld\n&quot;,res);<br>
return res &lt;= m;<br>
}<br>
从max(mid)=1e9开始遍历大于所有mid的数组部分，计算res,如果res的值小于操作总数k的值，即表明在操作数小于k的情况下最大的mid值。<br>
3999999984<br>
1999999984<br>
999999984<br>
499999984<br>
249999984<br>
124999984<br>
62499984<br>
31249984<br>
15624984<br>
7812484<br>
3906232<br>
1953108<br>
976544<br>
488264<br>
244124<br>
122052<br>
61016<br>
30500<br>
15240<br>
7612<br>
3796<br>
1888<br>
936<br>
460<br>
220<br>
100<br>
40<br>
12<br>
0<br>
4<br>
8</p>
]]></summary>
        <content type="html"><![CDATA[<p>Acwing 3578 最大中位数<br>
#include <iostream><br>
#include <cstring><br>
#include <algorithm></p>
<p>using namespace std;</p>
<p>typedef long long LL；//由于数据范围所以采用LL;</p>
<p>const int N = 200010;</p>
<p>int n, m;<br>
int w[N];</p>
<p>bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
return res &lt;= m;<br>
}</p>
<p>int main()<br>
{<br>
scanf(&quot;%d%d&quot;, &amp;n, &amp;m);<br>
for (int i = 0; i &lt; n; i ++ ) scanf(&quot;%d&quot;, &amp;w[i]);<br>
sort(w, w + n);//将所有数据排序<br>
int l = 0, r = 2e9;<br>
//二分排序<br>
while (l &lt; r)<br>
{<br>
int mid = (LL)l + r + 1 &gt;&gt; 1;<br>
if (check(mid)) l = mid;<br>
else r = mid - 1;<br>
}<br>
printf(&quot;%d\n&quot;, r);<br>
return 0;<br>
}</p>
<p>题解1：<br>
bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
printf(&quot;%lld\n&quot;,res);<br>
return res &lt;= m;<br>
}<br>
从max(mid)=1e9开始遍历大于所有mid的数组部分，计算res,如果res的值小于操作总数k的值，即表明在操作数小于k的情况下最大的mid值。<br>
3999999984<br>
1999999984<br>
999999984<br>
499999984<br>
249999984<br>
124999984<br>
62499984<br>
31249984<br>
15624984<br>
7812484<br>
3906232<br>
1953108<br>
976544<br>
488264<br>
244124<br>
122052<br>
61016<br>
30500<br>
15240<br>
7612<br>
3796<br>
1888<br>
936<br>
460<br>
220<br>
100<br>
40<br>
12<br>
0<br>
4<br>
8</p>
<!-- more -->
<p>Acwing 3579 数字移动</p>
<p>常规想法：导致Time Limit Exceeded<br>
#include<iostream><br>
#include&lt;stdio.h&gt;<br>
#include<algorithm></p>
<p>const int N=20000010;</p>
<p>long long int W[N];<br>
long long int m;<br>
using namespace std;</p>
<p>int search(int n,int e,int u){//n代表第i个元素<br>
if(n==W[e])return u;<br>
return search(n,W[e],u+1);</p>
<p>}<br>
int main(){<br>
int T;<br>
scanf(&quot;%d&quot;,&amp;T);<br>
while(T--){<br>
scanf(&quot;%lld&quot;,&amp;m);<br>
for(int i=1;i&lt;=m;i++)scanf(&quot;%lld&quot;,&amp;W[i]);</p>
<pre><code>    for(int i=1;i&lt;=m;i++){
      
        printf(&quot;%d &quot;,search(i,i,1));
    }
    printf(&quot;\n&quot;);
}
return 0;
</code></pre>
<p>}<br>
优化算法，并查集：<br>
#include <iostream><br>
#include <cstring><br>
#include <algorithm></p>
<p>using namespace std;</p>
<p>const int N = 200010;</p>
<p>int n;<br>
int p[N], s[N];</p>
<p>int find(int x)  // 并查集<br>
{<br>
if (p[x] != x) p[x] = find(p[x]);<br>
return p[x];<br>
}</p>
<p>int main()<br>
{<br>
int T;<br>
scanf(&quot;%d&quot;, &amp;T);</p>
<pre><code>while (T -- )
{
    scanf(&quot;%d&quot;, &amp;n);
    for (int i = 1; i &lt;= n; i ++ ) p[i] = i, s[i] = 1;
    for (int i = 1; i &lt;= n; i ++ )
    {
        int j;
        scanf(&quot;%d&quot;, &amp;j);
        if (find(i) != find(j))
        {
            s[find(j)] += s[find(i)];
            p[find(i)] = find(j);
        }
    }
    for (int i = 1; i &lt;= n; i ++ )
        printf(&quot;%d &quot;, s[find(i)]);
    puts(&quot;&quot;);
}

return 0;
</code></pre>
<p>}<br>
并查集知识点补充：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ACWing]]></title>
        <id>https://lhy-maker.github.io/post/acwing/</id>
        <link href="https://lhy-maker.github.io/post/acwing/">
        </link>
        <updated>2021-05-29T14:05:31.000Z</updated>
        <content type="html"><![CDATA[<p>#include&lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
using LL = long long;<br>
int main(){<br>
cin.tie(nullptr)-&gt;sync_with_stdio(false);<br>
int N, M, a, b, ma = 0, mb = 0;<br>
for(cin &gt;&gt; N; N; N -= 1){<br>
cin &gt;&gt; a;<br>
ma = max(ma, a);<br>
}<br>
for(cin &gt;&gt; M; M; M -= 1){<br>
cin &gt;&gt; b;<br>
mb = max(mb, b);<br>
}<br>
cout &lt;&lt; ma &lt;&lt; &quot; &quot; &lt;&lt; mb;<br>
return 0;<br>
}</p>
<p>#include&lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
using LL = long long;<br>
int main(){<br>
cin.tie(nullptr)-&gt;sync_with_stdio(false);<br>
int N, K;<br>
cin &gt;&gt; N &gt;&gt; K;<br>
vector<LL> v(N);<br>
for(LL&amp; x : v) cin &gt;&gt; x;<br>
sort(v.begin(), v.end(), greater<LL>());<br>
LL L = 1, R = 2E9;<br>
while(L &lt; R){<br>
LL M = (L + R + 1) &gt;&gt; 1;<br>
LL need = 0;<br>
for(int i = 0; i &lt; (N + 1) / 2; i += 1) need += max(0LL, M - v[i]);<br>
if(need &lt;= K) L = M;<br>
else R = M - 1;<br>
}<br>
cout &lt;&lt; L;<br>
return 0;<br>
}</p>
<p>😀🤡🤡🤡🤡🤡🤡#include&lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
using LL = long long;<br>
int main(){<br>
cin.tie(nullptr)-&gt;sync_with_stdio(false);<br>
int T;<br>
for(cin &gt;&gt; T; T; T -= 1){<br>
int N;<br>
cin &gt;&gt; N;<br>
vector<int> p(N + 1), ans(N + 1), vis(N + 1);<br>
for(int i = 1; i &lt;= N; i += 1) cin &gt;&gt; p[i];<br>
for(int i = 1; i &lt;= N; i += 1) if(not vis[i]){<br>
vector<int> v;<br>
for(int u = i; not vis[u]; u = p[u]){<br>
v.push_back(u);<br>
vis[u] = 1;<br>
}<br>
for(int x : v) ans[x] = v.size();<br>
}<br>
for(int i = 1; i &lt;= N; i += 1) cout &lt;&lt; ans[i] &lt;&lt; &quot; &quot;;<br>
cout &lt;&lt; &quot;\n&quot;;<br>
}<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello world!]]></title>
        <id>https://lhy-maker.github.io/post/hello-world/</id>
        <link href="https://lhy-maker.github.io/post/hello-world/">
        </link>
        <updated>2021-05-29T13:57:00.000Z</updated>
        <content type="html"><![CDATA[<p>你好，世界！  ------2021/5/29</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lhy-maker.github.io/post/hello-gridea/</id>
        <link href="https://lhy-maker.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>