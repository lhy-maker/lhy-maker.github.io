<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lhy-maker.github.io</id>
    <title>Gridea</title>
    <updated>2021-06-01T14:39:05.480Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lhy-maker.github.io"/>
    <link rel="self" href="https://lhy-maker.github.io/atom.xml"/>
    <subtitle>欢迎来到我的世界，请遵循协议！</subtitle>
    <logo>https://lhy-maker.github.io/images/avatar.png</logo>
    <icon>https://lhy-maker.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Acwing 通关打怪之路]]></title>
        <id>https://lhy-maker.github.io/post/acwing-tong-guan-da-guai-zhi-lu/</id>
        <link href="https://lhy-maker.github.io/post/acwing-tong-guan-da-guai-zhi-lu/">
        </link>
        <updated>2021-06-01T09:22:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1背包问题分为01背包问题完全背包问题和多重背包问题">1，背包问题：分为01背包问题，完全背包问题和多重背包问题。</h1>
<p>基础题型讲解： 01 背包问题<br>
有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。<br>
第 i 件物品的体积是 vi，价值是 wi。<br>
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>
输出最大价值。<br>
输入格式<br>
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。<br>
接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。<br>
输出格式<br>
输出一个整数，表示最大价值。<br>
数据范围<br>
0&lt;N,V≤1000<br>
0&lt;vi,wi≤1000<br>
输入样例<br>
4 5<br>
1 2<br>
2 4<br>
3 4<br>
4 5<br>
输出样例：<br>
8</p>
<p>题解：用F[i][j]表示前i个物体，在背包容积为 j 的情况下，所能达到的最大价值。<br>
此题属于动态规划的范畴，可以采用集合概念来分析；<br>
DP分为状态表示(F[i][j])和状态计算(本质是集合的划分)，状态的表示F[i][j]分为集合和属性两大部分，集合部分主要是对所有选法和选法条件即数目限制和体积限制，而属性部分包括max,min,num等多种属性。<br>
对于本题而言：状态表示部分；F[i][j]表示前i个物体，在背包容积为 j 的情况下，所能达到的最大价值。<br>
状态计算部分：F[i][j]=F[i-1][j];//表示不选第i个物体且满足题目要求的最大值；<br>
F[i][j]=max(F[i][j],F[i-1][j-v]+w); //表示选第i个物体且满足题目要求的最大值；</p>
<h1 id="示例代码未优化代码">示例代码（未优化代码🚩）：</h1>
<p>#include<iostream><br>
#include<algorithm><br>
#include&lt;stdio.h&gt;<br>
const int N=1010;<br>
int V[N],W[N],F[N][N];<br>
using namespace std;<br>
int main(){<br>
int m,n;<br>
scanf(&quot;%d %d&quot;,&amp;m,&amp;n);<br>
for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d&quot;,&amp;V[i],&amp;W[i]);<br>
for(int i=1;i&lt;=m;i++){<br>
for(int j=0;j&lt;=n;j++){<br>
F[i][j]=F[i-1][j];<br>
if(j&gt;=V[i]){<br>
F[i][j]=max(F[i][j],F[i-1][j-V[i]]+W[i]);<br>
}<br>
}<br>
}<br>
printf(&quot;%d\n&quot;,F[m][n]);<br>
return 0;<br>
}</p>
<p>优化代码思路：F[i][j]表示前i个物体，在背包容积为 j 的情况下，所能达到的最大价值。<br>
而二维数组F[i][j]可以用一维数组F[j]表示,将i作为隐形的坐标：</p>
<h1 id="示例代码优化后代码️">示例代码：(优化后代码🏳️‍🌈)</h1>
<p>#include<iostream><br>
#include<algorithm><br>
#include&lt;stdio.h&gt;<br>
const int N=1010;<br>
int V[N],W[N],F[N];<br>
using namespace std;<br>
int main(){<br>
int m,n;<br>
scanf(&quot;%d %d&quot;,&amp;m,&amp;n);<br>
for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d&quot;,&amp;V[i],&amp;W[i]);<br>
for(int i=1;i&lt;=m;i++){<br>
for(int j=n;j&gt;=V[i];j--){<br>
F[j]=max(F[j],F[j-V[i]]+W[i]);<br>
}<br>
}<br>
printf(&quot;%d\n&quot;,F[n]);<br>
return 0;<br>
}</p>
<h1 id="完全背包问题">完全背包问题</h1>
<p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。<br>
第 i 种物品的体积是 vi，价值是 wi。<br>
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>
输出最大价值。</p>
<p>输入格式<br>
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。<br>
接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</p>
<p>输出格式<br>
输出一个整数，表示最大价值。</p>
<p>数据范围<br>
0&lt;N,V≤1000<br>
0&lt;vi,wi≤1000<br>
输入样例<br>
4 5<br>
1 2<br>
2 4<br>
3 4<br>
4 5<br>
输出样例：<br>
10</p>
<p>题解：此种背包问题与01背包问题的区别在于背包是否可以无限次使用<br>
思路依旧只不过是遍历问题的决策层改变；</p>
<h1 id="对于大部分的dp问题决策层应该放在最里面">对于大部分的dp问题，决策层应该放在最里面。</h1>
<p>对于示范数据：<br>
4 5<br>
1 2<br>
2 4<br>
3 4<br>
4 5</p>
<p>其决策后的数据：</p>
<h1 id="完全背包问题-2">完全背包问题</h1>
<p>2 4 6 8 10//从背包容量等于第i个数据的体积开始,如果选到了该数据则<br>
4 6 8 10 //j=5的情况下,选取顺序为F[0],F[1],F[2],F[3];<br>
6 8 10<br>
8 10<br>
10</p>
<h1 id="01背包问题">01背包问题</h1>
<p>2 2 2 2 2//j=5的情况下，选取顺序为F[3],F[2],F[1],F[0];<br>
6 6 6 4<br>
8 6 6<br>
8 6<br>
8</p>
<h1 id="示例代码">示例代码:</h1>
<p>#include<iostream><br>
#include<algorithm><br>
#include&lt;stdio.h&gt;</p>
<p>const int N=1010;<br>
int V[N],W[N],F[N];</p>
<p>using namespace std;</p>
<p>int main(){<br>
int m,n;<br>
scanf(&quot;%d %d&quot;,&amp;m,&amp;n);</p>
<pre><code>for(int i=1;i&lt;=m;i++)scanf(&quot;%d%d&quot;,&amp;V[i],&amp;W[i]);

for(int i=1;i&lt;=m;i++){
    
    for(int j=V[i];j&lt;=n;j++){
        
        F[j]=max(F[j],F[j-V[i]]+W[i]);//由于无限次使用；所以从j=V[i]开始遍历；F[j-V[i]]：既保证了无限次使用又确保i-1前的数据没有动过
    }
}
printf(&quot;%d&quot;,F[n]);
return 0;
</code></pre>
<p>}</p>
<h1 id="多重背包问题">多重背包问题</h1>
<p>有 N 种物品和一个容量是 V 的背包。<br>
第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。<br>
求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>
输出最大价值。<br>
输入格式<br>
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。<br>
接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。<br>
输出格式<br>
输出一个整数，表示最大价值。<br>
数据范围<br>
0&lt;N,V≤100<br>
0&lt;vi,wi,si≤100<br>
输入样例<br>
4 5<br>
1 2 3<br>
2 4 1<br>
3 4 3<br>
4 5 2<br>
输出样例：<br>
10</p>
<p>#多重背包问题和01背包问题的区别在于多了一个限制条件为并非选或者不选而是选几个的问题：<br>
可以将其拆分为01背包问题；</p>
<p>示例代码：<br>
#include<iostream><br>
#include<algorithm><br>
using namespace std;<br>
main()<br>
{<br>
int dp[1005],n,t,v,w,s;<br>
cin&gt;&gt;n&gt;&gt;t;<br>
while(n--)<br>
{<br>
cin&gt;&gt;w&gt;&gt;v&gt;&gt;s;<br>
for(int i=1;i&lt;=s;i++)<br>
for(int j=t;j&gt;=w;j--)<br>
dp[j]=max(dp[j],dp[j-w]+v);<br>
}<br>
cout&lt;&lt;dp[t];<br>
}</p>
<h1 id="多重背包的二进制优化问题">多重背包的二进制优化问题</h1>
<p>有 N 种物品和一个容量是 V 的背包。</p>
<p>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。</p>
<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>
输出最大价值。</p>
<p>输入格式<br>
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p>
<p>接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p>
<p>输出格式<br>
输出一个整数，表示最大价值。</p>
<p>数据范围<br>
0&lt;N≤1000<br>
0&lt;V≤2000<br>
0&lt;vi,wi,si≤2000<br>
提示：<br>
本题考查多重背包的二进制优化方法。</p>
<p>输入样例<br>
4 5<br>
1 2 3<br>
2 4 1<br>
3 4 3<br>
4 5 2<br>
输出样例：<br>
10</p>
<p>由于在枚举过程中采用逐个枚举，导致时间复杂度过大，导致Time LEXCED,所以采用二进制枚举</p>
<h1 id="二进制优化">二进制优化：</h1>
<p>考虑二进制的思想，我们考虑把第 i 种物品换成若干件物品，使得原问题中第 i 种物品可取的每种策略——取[0,n[i]] 件——均能等价于取若干件代换以后的物品。另外，取超过 n[i] 件的策略必不能出现。方法是：将第 i 种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 1,2,4,...,2<sup>k,n-2</sup>k+1 ，且 n-2^k+1 是满足[0,n[i]]  最大整数。例如，如果 n为 13，就将这种物品分成系数分别为 1, 2, 4, 6 的 4 件物品。分成的这几件物品的系数和为 n[i] ，表明不可能取多于 n[i] 件的第 i 种物品。另外这种方法也能保证对于 [0,n[i]] 间的每一个整数，均可以用若干个系数的和表示，这个证明可以分[0,2^k-1]  和 [2<sup>k,n-2</sup>k+1] 两段来分别讨论得出，这样就将第 i 种物品分成了log[n] 种物品，将原问题转化为了复杂度较小 的 01 背包问题，是很大的改进。</p>
<h1 id="vector详解httpcbianchengnetview6749html">vector详解http://c.biancheng.net/view/6749.html</h1>
<p>#include<iostream><br>
#include<algorithm><br>
#include&lt;stdio.h&gt;<br>
#include<vector></p>
<p>const int N=20100;</p>
<p>int V[N],W[N],F[N],S[N];</p>
<p>struct Good{<br>
int v,w;<br>
};</p>
<p>using namespace std;</p>
<p>int main(){<br>
int m,n;<br>
vector<Good>Goods;<br>
scanf(&quot;%d %d&quot;,&amp;m,&amp;n);</p>
<pre><code>for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d %d&quot;,&amp;V[i],&amp;W[i],&amp;S[i]);
for(int i=1;i&lt;=m;i++){
    for(int k=1;k&lt;=S[i];k*=2){
        S[i]-=k;
        Goods.push_back({k*V[i],k*W[i]});
    }
    if(S[i]&gt;0)Goods.push_back({S[i]*V[i],S[i]*W[i]});
}

for(auto  good: Goods){//auto函数自动识别数据类型
    for(int j=n;j&gt;=good.v;j--){
        F[j]=max(F[j],F[j-good.v]+good.w);
    }
}
printf(&quot;%d\n&quot;,F[n]);

return 0;
</code></pre>
<p>}<br>
vector 容器以类模板 vector<T>（ T 表示存储元素的类型）的形式定义在 <vector> 头文件中，并位于 std 命名空间中</p>
<h1 id="代码示例vector-容器使用">代码示例：(vector 容器使用🏴)</h1>
<p>#include <iostream><br>
#include <vector><br>
using namespace std;<br>
int main()<br>
{<br>
//初始化一个空vector容量<br>
vector<char>value;<br>
//向value容器中的尾部依次添加 S、T、L 字符<br>
value.push_back('S');<br>
value.push_back('T');<br>
value.push_back('L');<br>
//调用 size() 成员函数容器中的元素个数<br>
printf(&quot;元素个数为：%d\n&quot;, value.size());<br>
//使用迭代器遍历容器<br>
for (auto i = value.begin(); i &lt; value.end(); i++) {<br>
cout &lt;&lt; *i &lt;&lt; &quot; &quot;;<br>
}<br>
cout &lt;&lt; endl;<br>
//向容器开头插入字符<br>
value.insert(value.begin(), 'C');<br>
cout &lt;&lt; &quot;首个元素为：&quot; &lt;&lt; value.at(0) &lt;&lt; endl;<br>
return 0;<br>
}</p>
<h1 id="单调队列优化多重背包问题滑动窗口问题">单调队列优化多重背包问题（滑动窗口问题）</h1>
<p>例题，滑动窗口的最大值问题：<br>
给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。<br>
例如，如果输入数组 [2,3,4,2,6,2,5,1] 及滑动窗口的大小 3，那么一共存在 6 个滑动窗口，它们的最大值分别为 [4,4,6,6,6,5]。<br>
注意：数据保证 k 大于 0，且 k 小于等于数组长度。<br>
样例<br>
输入：[2, 3, 4, 2, 6, 2, 5, 1] , k=3<br>
输出: [4, 4, 6, 6, 6, 5]</p>
<p>解决方法1：暴力枚举：对于数组中的每个元素，需要计算它和后面的K-1个元素的和，并且求平均<br>
解决方法2：解决重复计算。我们可以把每一个连续的子数组看作一个大小为5的窗口。当我们从一个子数组移到下一个子数组时，相当于是把窗口向前滑动了一个元素。此时，为了重用上一个窗口的计算求和的结果，我们只要从窗口中减去那个移出的元素，加上新移进来的元素就可以了。这样，对新的子数组，就省去了求5个元素的和的过程。</p>
<h1 id="利用滑动窗口的思路可以对多重背包问题进行优化">利用滑动窗口的思路可以对多重背包问题进行优化：</h1>
<p>#include <iostream><br>
#include <cstring></p>
<p>using namespace std;</p>
<p>const int N = 20010;</p>
<p>int dp[N], pre[N], q[N];<br>
int n, m;</p>
<p>int main() {<br>
cin &gt;&gt; n &gt;&gt; m;<br>
for (int i = 0; i &lt; n; ++i) {<br>
memcpy(pre, dp, sizeof(dp));<br>
int v, w, s;<br>
cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>
for (int j = 0; j &lt; v; ++j) {<br>
int head = 0, tail = -1;<br>
for (int k = j; k &lt;= m; k += v) {</p>
<pre><code>            if (head &lt;= tail &amp;&amp; k - s*v &gt; q[head])
                ++head;

            while (head &lt;= tail &amp;&amp; pre[q[tail]] - (q[tail] - j)/v * w &lt;= pre[k] - (k - j)/v * w)
                --tail;

            if (head &lt;= tail)
                dp[k] = max(dp[k], pre[q[head]] + (k - q[head])/v * w);

            q[++tail] = k;
        }
    }
}
cout &lt;&lt; dp[m] &lt;&lt; endl;
return 0;
</code></pre>
<p>}</p>
<p>代码解释：(单调队列优化) O(NV)O(NV)<br>
一共 n 类物品，背包的容量是 m<br>
每类物品的体积为v, 价值为w，个数为s<br>
我们先来回顾一下传统的dp方程<br>
dp[i][j] 表示将前 i 种物品放入容量为 j 的背包中所得到的最大价值<br>
dp[i][j] = max(不放入物品 i，放入1个物品 i，放入2个物品 i, ... , 放入k个物品 i)<br>
这里 k 要满足：k &lt;= s, j - k<em>v &gt;= 0<br>
不放物品  i = dp[i-1][j]<br>
放k个物品 i = dp[i-1][j - k</em>v] + k<em>w<br>
dp[i][j] = max(dp[i-1][j], dp[i-1][j-v] + w, dp[i-1][j-2</em>v] + 2<em>w,..., dp[i-1][j-k</em>v] + k<em>w)<br>
实际上我们并不需要二维的dp数组，适当的调整循环条件，我们可以重复利用dp数组来保存上一轮的信息<br>
我们令 dp[j] 表示容量为j的情况下，获得的最大价值<br>
那么，针对每一类物品 i ，我们都更新一下 dp[m] --&gt; dp[0] 的值，最后 dp[m] 就是一个全局最优值<br>
dp[m] = max(dp[m], dp[m-v] + w, dp[m-2</em>v] + 2<em>w, dp[m-3</em>v] + 3<em>w, ...)<br>
接下来，我们把 dp[0] --&gt; dp[m] 写成下面这种形式<br>
dp[0], dp[v],   dp[2</em>v],   dp[3<em>v],   ... , dp[k</em>v]<br>
dp[1], dp[v+1], dp[2<em>v+1], dp[3</em>v+1], ... , dp[k<em>v+1]<br>
dp[2], dp[v+2], dp[2</em>v+2], dp[3<em>v+2], ... , dp[k</em>v+2]<br>
...<br>
dp[j], dp[v+j], dp[2<em>v+j], dp[3</em>v+j], ... , dp[k<em>v+j]<br>
显而易见，m 一定等于 k</em>v + j，其中  0 &lt;= j &lt; v<br>
所以，我们可以把 dp 数组分成 j 个类，每一类中的值，都是在同类之间转换得到的<br>
也就是说，dp[k<em>v+j] 只依赖于 { dp[j], dp[v+j], dp[2</em>v+j], dp[3<em>v+j], ... , dp[k</em>v+j] }<br>
因为我们需要的是{ dp[j], dp[v+j], dp[2<em>v+j], dp[3</em>v+j], ... , dp[k<em>v+j] } 中的最大值，<br>
可以通过维护一个单调队列来得到结果。这样的话，问题就变成了 j 个单调队列的问题<br>
所以，我们可以得到<br>
dp[j]    =     dp[j]<br>
dp[j+v]  = max(dp[j] +  w,  dp[j+v])<br>
dp[j+2v] = max(dp[j] + 2w,  dp[j+v] +  w, dp[j+2v])<br>
dp[j+3v] = max(dp[j] + 3w,  dp[j+v] + 2w, dp[j+2v] + w, dp[j+3v])<br>
...<br>
但是，这个队列中前面的数，每次都会增加一个 w ，所以我们需要做一些转换<br>
dp[j]    =     dp[j]<br>
dp[j+v]  = max(dp[j], dp[j+v] - w) + w<br>
dp[j+2v] = max(dp[j], dp[j+v] - w, dp[j+2v] - 2w) + 2w<br>
dp[j+3v] = max(dp[j], dp[j+v] - w, dp[j+2v] - 2w, dp[j+3v] - 3w) + 3w<br>
...<br>
这样，每次入队的值是 dp[j+k</em>v] - k<em>w<br>
单调队列问题，最重要的两点<br>
1）维护队列元素的个数，如果不能继续入队，弹出队头元素<br>
2）维护队列的单调性，即：尾值 &gt;= dp[j + k</em>v] - k*w</p>
<p>本题中，队列中元素的个数应该为 s+1 个，即 0 -- s 个物品 i。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Acwing 周赛 NO1]]></title>
        <id>https://lhy-maker.github.io/post/acwing-zhou-sai-no1/</id>
        <link href="https://lhy-maker.github.io/post/acwing-zhou-sai-no1/">
        </link>
        <updated>2021-05-30T03:08:18.000Z</updated>
        <summary type="html"><![CDATA[<p>Acwing 3578 最大中位数<br>
#include <iostream><br>
#include <cstring><br>
#include <algorithm></p>
<p>using namespace std;</p>
<p>typedef long long LL；//由于数据范围所以采用LL;</p>
<p>const int N = 200010;</p>
<p>int n, m;<br>
int w[N];</p>
<p>bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
return res &lt;= m;<br>
}</p>
<p>int main()<br>
{<br>
scanf(&quot;%d%d&quot;, &amp;n, &amp;m);<br>
for (int i = 0; i &lt; n; i ++ ) scanf(&quot;%d&quot;, &amp;w[i]);<br>
sort(w, w + n);//将所有数据排序<br>
int l = 0, r = 2e9;<br>
//二分排序<br>
while (l &lt; r)<br>
{<br>
int mid = (LL)l + r + 1 &gt;&gt; 1;<br>
if (check(mid)) l = mid;<br>
else r = mid - 1;<br>
}<br>
printf(&quot;%d\n&quot;, r);<br>
return 0;<br>
}</p>
<p>题解1：<br>
bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
printf(&quot;%lld\n&quot;,res);<br>
return res &lt;= m;<br>
}<br>
从max(mid)=1e9开始遍历大于所有mid的数组部分，计算res,如果res的值小于操作总数k的值，即表明在操作数小于k的情况下最大的mid值。<br>
3999999984<br>
1999999984<br>
999999984<br>
499999984<br>
249999984<br>
124999984<br>
62499984<br>
31249984<br>
15624984<br>
7812484<br>
3906232<br>
1953108<br>
976544<br>
488264<br>
244124<br>
122052<br>
61016<br>
30500<br>
15240<br>
7612<br>
3796<br>
1888<br>
936<br>
460<br>
220<br>
100<br>
40<br>
12<br>
0<br>
4<br>
8</p>
]]></summary>
        <content type="html"><![CDATA[<p>Acwing 3578 最大中位数<br>
#include <iostream><br>
#include <cstring><br>
#include <algorithm></p>
<p>using namespace std;</p>
<p>typedef long long LL；//由于数据范围所以采用LL;</p>
<p>const int N = 200010;</p>
<p>int n, m;<br>
int w[N];</p>
<p>bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
return res &lt;= m;<br>
}</p>
<p>int main()<br>
{<br>
scanf(&quot;%d%d&quot;, &amp;n, &amp;m);<br>
for (int i = 0; i &lt; n; i ++ ) scanf(&quot;%d&quot;, &amp;w[i]);<br>
sort(w, w + n);//将所有数据排序<br>
int l = 0, r = 2e9;<br>
//二分排序<br>
while (l &lt; r)<br>
{<br>
int mid = (LL)l + r + 1 &gt;&gt; 1;<br>
if (check(mid)) l = mid;<br>
else r = mid - 1;<br>
}<br>
printf(&quot;%d\n&quot;, r);<br>
return 0;<br>
}</p>
<p>题解1：<br>
bool check(int mid)<br>
{<br>
LL res = 0;<br>
for (int i = n / 2; i &lt; n; i ++ )<br>
if (w[i] &lt; mid)<br>
res += mid - w[i];<br>
printf(&quot;%lld\n&quot;,res);<br>
return res &lt;= m;<br>
}<br>
从max(mid)=1e9开始遍历大于所有mid的数组部分，计算res,如果res的值小于操作总数k的值，即表明在操作数小于k的情况下最大的mid值。<br>
3999999984<br>
1999999984<br>
999999984<br>
499999984<br>
249999984<br>
124999984<br>
62499984<br>
31249984<br>
15624984<br>
7812484<br>
3906232<br>
1953108<br>
976544<br>
488264<br>
244124<br>
122052<br>
61016<br>
30500<br>
15240<br>
7612<br>
3796<br>
1888<br>
936<br>
460<br>
220<br>
100<br>
40<br>
12<br>
0<br>
4<br>
8</p>
<!-- more -->
<p>Acwing 3579 数字移动</p>
<p>常规想法：导致Time Limit Exceeded<br>
#include<iostream><br>
#include&lt;stdio.h&gt;<br>
#include<algorithm></p>
<p>const int N=20000010;</p>
<p>long long int W[N];<br>
long long int m;<br>
using namespace std;</p>
<p>int search(int n,int e,int u){//n代表第i个元素<br>
if(n==W[e])return u;<br>
return search(n,W[e],u+1);</p>
<p>}<br>
int main(){<br>
int T;<br>
scanf(&quot;%d&quot;,&amp;T);<br>
while(T--){<br>
scanf(&quot;%lld&quot;,&amp;m);<br>
for(int i=1;i&lt;=m;i++)scanf(&quot;%lld&quot;,&amp;W[i]);</p>
<pre><code>    for(int i=1;i&lt;=m;i++){
      
        printf(&quot;%d &quot;,search(i,i,1));
    }
    printf(&quot;\n&quot;);
}
return 0;
</code></pre>
<p>}<br>
优化算法，并查集：<br>
#include <iostream><br>
#include <cstring><br>
#include <algorithm></p>
<p>using namespace std;</p>
<p>const int N = 200010;</p>
<p>int n;<br>
int p[N], s[N];</p>
<p>int find(int x)  // 并查集<br>
{<br>
if (p[x] != x) p[x] = find(p[x]);<br>
return p[x];<br>
}</p>
<p>int main()<br>
{<br>
int T;<br>
scanf(&quot;%d&quot;, &amp;T);</p>
<pre><code>while (T -- )
{
    scanf(&quot;%d&quot;, &amp;n);
    for (int i = 1; i &lt;= n; i ++ ) p[i] = i, s[i] = 1;
    for (int i = 1; i &lt;= n; i ++ )
    {
        int j;
        scanf(&quot;%d&quot;, &amp;j);
        if (find(i) != find(j))
        {
            s[find(j)] += s[find(i)];
            p[find(i)] = find(j);
        }
    }
    for (int i = 1; i &lt;= n; i ++ )
        printf(&quot;%d &quot;, s[find(i)]);
    puts(&quot;&quot;);
}

return 0;
</code></pre>
<p>}<br>
并查集知识点补充：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ACWing]]></title>
        <id>https://lhy-maker.github.io/post/acwing/</id>
        <link href="https://lhy-maker.github.io/post/acwing/">
        </link>
        <updated>2021-05-29T14:05:31.000Z</updated>
        <content type="html"><![CDATA[<p>#include&lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
using LL = long long;<br>
int main(){<br>
cin.tie(nullptr)-&gt;sync_with_stdio(false);<br>
int N, M, a, b, ma = 0, mb = 0;<br>
for(cin &gt;&gt; N; N; N -= 1){<br>
cin &gt;&gt; a;<br>
ma = max(ma, a);<br>
}<br>
for(cin &gt;&gt; M; M; M -= 1){<br>
cin &gt;&gt; b;<br>
mb = max(mb, b);<br>
}<br>
cout &lt;&lt; ma &lt;&lt; &quot; &quot; &lt;&lt; mb;<br>
return 0;<br>
}</p>
<p>#include&lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
using LL = long long;<br>
int main(){<br>
cin.tie(nullptr)-&gt;sync_with_stdio(false);<br>
int N, K;<br>
cin &gt;&gt; N &gt;&gt; K;<br>
vector<LL> v(N);<br>
for(LL&amp; x : v) cin &gt;&gt; x;<br>
sort(v.begin(), v.end(), greater<LL>());<br>
LL L = 1, R = 2E9;<br>
while(L &lt; R){<br>
LL M = (L + R + 1) &gt;&gt; 1;<br>
LL need = 0;<br>
for(int i = 0; i &lt; (N + 1) / 2; i += 1) need += max(0LL, M - v[i]);<br>
if(need &lt;= K) L = M;<br>
else R = M - 1;<br>
}<br>
cout &lt;&lt; L;<br>
return 0;<br>
}</p>
<p>😀🤡🤡🤡🤡🤡🤡#include&lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
using LL = long long;<br>
int main(){<br>
cin.tie(nullptr)-&gt;sync_with_stdio(false);<br>
int T;<br>
for(cin &gt;&gt; T; T; T -= 1){<br>
int N;<br>
cin &gt;&gt; N;<br>
vector<int> p(N + 1), ans(N + 1), vis(N + 1);<br>
for(int i = 1; i &lt;= N; i += 1) cin &gt;&gt; p[i];<br>
for(int i = 1; i &lt;= N; i += 1) if(not vis[i]){<br>
vector<int> v;<br>
for(int u = i; not vis[u]; u = p[u]){<br>
v.push_back(u);<br>
vis[u] = 1;<br>
}<br>
for(int x : v) ans[x] = v.size();<br>
}<br>
for(int i = 1; i &lt;= N; i += 1) cout &lt;&lt; ans[i] &lt;&lt; &quot; &quot;;<br>
cout &lt;&lt; &quot;\n&quot;;<br>
}<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello world!]]></title>
        <id>https://lhy-maker.github.io/post/hello-world/</id>
        <link href="https://lhy-maker.github.io/post/hello-world/">
        </link>
        <updated>2021-05-29T13:57:00.000Z</updated>
        <content type="html"><![CDATA[<p>你好，世界！  ------2021/5/29</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lhy-maker.github.io/post/hello-gridea/</id>
        <link href="https://lhy-maker.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>